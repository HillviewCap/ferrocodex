    Checking ferrocodex v0.4.3 (F:\code\ferrocodex\apps\desktop\src-tauri)
warning: unused imports: `AssetInfo`, `AssetRepository`, and `SqliteAssetRepository`
 --> src\assets\tree_navigation.rs:4:21
  |
4 | use crate::assets::{AssetRepository, SqliteAssetRepository, AssetInfo, AssetHierarchy, AssetType};
  |                     ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `uuid::Uuid`
 --> src\firmware_analysis\queue.rs:8:5
  |
8 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\recovery\mod.rs:6:5
  |
6 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> src\vault\access_control.rs:3:17
  |
3 | use std::sync::{Arc, Mutex};
  |                 ^^^  ^^^^^

warning: unused imports: `AccessResult`, `AccessType`, `SqliteVaultRepository`, `VaultAccessControlService`, and `VaultRepository`
 --> src\vault\secure_repository.rs:7:5
  |
7 |     VaultRepository, SqliteVaultRepository, IdentityVault, VaultInfo, VaultSecret, AddSecretRequest, 
  |     ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^
8 |     VaultAccessControlService, PermissionType, AccessType, AccessResult, VaultVersion,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src\vault\rotation.rs:7:5
  |
7 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `std::pin::Pin`
 --> src\error_handling\retry.rs:5:5
  |
5 | use std::pin::Pin;
  |     ^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
 --> src\error_handling\circuit_breaker.rs:4:5
  |
4 | use std::pin::Pin;
  |     ^^^^^^^^^^^^^

warning: unused import: `Duration`
 --> src\error_handling\circuit_breaker.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused import: `tokio::time::sleep`
 --> src\error_handling\circuit_breaker.rs:7:5
  |
7 | use tokio::time::sleep;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `CircuitBreaker` and `RetryResult`
 --> src\error_handling\recovery_coordinator.rs:5:5
  |
5 |     RetryResult,
  |     ^^^^^^^^^^^
6 |     CircuitBreaker, 
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> src\error_handling\recovery_coordinator.rs:16:5
   |
16 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `tokio::time::sleep`
  --> src\error_handling\recovery_coordinator.rs:19:5
   |
19 | use tokio::time::sleep;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
 --> src\error_handling\user_notifications.rs:6:5
  |
6 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `SystemDegradationLevel`
 --> src\error_handling\degradation_preferences.rs:2:91
  |
2 | use crate::error_handling::graceful_degradation::{FeatureAvailability, FeatureImportance, SystemDegradationLevel};
  |                                                                                           ^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `EnhancedError`, `ErrorDomain`, `ErrorSeverity`, and `RecoveryStrategy`
 --> src\error_handling\ui_status.rs:1:29
  |
1 | use crate::error_handling::{EnhancedError, ErrorDomain, ErrorSeverity, RecoveryStrategy};
  |                             ^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused imports: `NotificationPriority` and `SystemDegradationNotification`
 --> src\error_handling\ui_status.rs:4:74
  |
4 | ...ions::{DegradationNotification, SystemDegradationNotification, NotificationType, NotificationPriority};
  |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                    ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `recovery_coordinator::*`
  --> src\error_handling\mod.rs:28:9
   |
28 | pub use recovery_coordinator::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `service_provider::*`
  --> src\error_handling\mod.rs:29:9
   |
29 | pub use service_provider::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `offline_providers::*`
  --> src\error_handling\mod.rs:30:9
   |
30 | pub use offline_providers::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `graceful_degradation::*`
  --> src\error_handling\mod.rs:31:9
   |
31 | pub use graceful_degradation::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `user_notifications::*`
  --> src\error_handling\mod.rs:32:9
   |
32 | pub use user_notifications::*;
   |         ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `enhanced_cache::*`
  --> src\error_handling\mod.rs:33:9
   |
33 | pub use enhanced_cache::*;
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `degradation_preferences::*`
  --> src\error_handling\mod.rs:34:9
   |
34 | pub use degradation_preferences::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ui_status::*`
  --> src\error_handling\mod.rs:35:9
   |
35 | pub use ui_status::*;
   |         ^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src\metadata\performance.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src\metadata\api\mod.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> src\metadata\api\crud.rs:2:13
  |
2 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused imports: `AppliedFix`, `FieldUpdate`, `FixResults`, `MetadataRelationship`, `SchemaDependency`, `SimilarAsset`, `TimePeriod`, `UpdateOperation`, and `UsageAnalytics`
  --> src\metadata\api\crud.rs:13:5
   |
13 |     FixResults, AppliedFix, MetadataRelationship, SimilarAsset, SchemaDependency,
   |     ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
14 |     TimePeriod, UsageAnalytics, FieldUpdate, UpdateOperation, ValidationResult, ValidationError,
   |     ^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused imports: `AssetMetadataSchema` and `MetadataRepository`
 --> src\metadata\api\query.rs:4:38
  |
4 | use crate::metadata::{AssetMetadata, AssetMetadataSchema, SqliteMetadataRepository, MetadataRepository};
  |                                      ^^^^^^^^^^^^^^^^^^^                            ^^^^^^^^^^^^^^^^^^

warning: unused import: `SortDirection`
 --> src\metadata\api\query.rs:6:25
  |
6 | use super::{Pagination, SortDirection};
  |                         ^^^^^^^^^^^^^

warning: unused import: `ApiResponse`
 --> src\metadata\api\bulk.rs:8:57
  |
8 | use super::{MetadataValidationRequest, PartialMetadata, ApiResponse, ValidationResult, ValidationError};
  |                                                         ^^^^^^^^^^^

warning: unused import: `ValidationResult`
 --> src\metadata\api\export.rs:4:59
  |
4 | use crate::metadata::{AssetMetadata, AssetMetadataSchema, ValidationResult, ValidationError, SqliteMetadataRepository, MetadataRepository};
  |                                                           ^^^^^^^^^^^^^^^^

warning: unused import: `super::Pagination`
 --> src\metadata\api\export.rs:6:5
  |
6 | use super::Pagination;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Write`
 --> src\metadata\api\export.rs:9:5
  |
9 | use std::io::Write;
  |     ^^^^^^^^^^^^^^

warning: unused import: `performance::*`
  --> src\metadata\mod.rs:16:9
   |
16 | pub use performance::*;
   |         ^^^^^^^^^^^^^^

warning: unused import: `api::*`
  --> src\metadata\mod.rs:17:9
   |
17 | pub use api::*;
   |         ^^^^^^

warning: unused import: `regex::Regex`
 --> src\security\mod.rs:2:5
  |
2 | use regex::Regex;
  |     ^^^^^^^^^^^^

warning: unused import: `std::collections::HashSet`
 --> src\security\mod.rs:4:5
  |
4 | use std::collections::HashSet;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `debug` and `warn`
 --> src\security\asset_name_validator.rs:4:22
  |
4 | use tracing::{error, warn, info, debug};
  |                      ^^^^        ^^^^^

warning: unused import: `Connection`
 --> src\workflow\repository.rs:5:24
  |
5 | use rusqlite::{params, Connection, Row};
  |                        ^^^^^^^^^^

warning: unused import: `WorkflowType`
  --> src\workflow\service.rs:16:20
   |
16 |     WorkflowDraft, WorkflowType, WorkflowStatus, WorkflowStepName, WorkflowData,
   |                    ^^^^^^^^^^^^

warning: unused import: `WorkflowError`
  --> src\workflow\validation.rs:12:5
   |
12 |     WorkflowError, WorkflowResult, WorkflowStepName, WorkflowData,
   |     ^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src\associations\mod.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src\bulk\operations.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `DateTime`
 --> src\bulk\operations.rs:6:14
  |
6 | use chrono::{DateTime, Utc};
  |              ^^^^^^^^

warning: unused imports: `AuditRepository`, `SqliteAuditRepository`, and `create_user_created_event`
 --> src\commands\auth_commands.rs:3:20
  |
3 | use crate::audit::{AuditRepository, SqliteAuditRepository, create_user_created_event};
  |                    ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `InputSanitizer`, `PasswordValidator`, and `UsernameValidator`
 --> src\commands\auth_commands.rs:4:25
  |
4 | use crate::validation::{UsernameValidator, PasswordValidator, InputSanitizer, RateLimiter};
  |                         ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused imports: `batch_load_tree_nodes`, `get_node_metadata`, `get_tree_statistics`, `preload_tree_nodes`, and `search_tree_nodes`
   --> src\commands\asset_commands.rs:465:5
    |
465 |     batch_load_tree_nodes,
    |     ^^^^^^^^^^^^^^^^^^^^^
466 |     search_tree_nodes,
    |     ^^^^^^^^^^^^^^^^^
467 |     get_tree_statistics,
    |     ^^^^^^^^^^^^^^^^^^^
468 |     preload_tree_nodes,
    |     ^^^^^^^^^^^^^^^^^^
469 |     get_node_metadata,
    |     ^^^^^^^^^^^^^^^^^

warning: unused import: `VaultRepository`
  --> src\commands\firmware_commands.rs:13:20
   |
13 | use crate::vault::{VaultRepository, SqliteVaultRepository};
   |                    ^^^^^^^^^^^^^^^

warning: unused import: `verify_password`
 --> src\commands\vault_commands.rs:4:35
  |
4 | use crate::auth::{SessionManager, verify_password};
  |                                   ^^^^^^^^^^^^^^^

warning: unused import: `UserInfo`
 --> src\commands\vault_commands.rs:5:68
  |
5 | use crate::users::{UserRepository, SqliteUserRepository, UserRole, UserInfo};
  |                                                                    ^^^^^^^^

warning: unused imports: `AuditEventRequest` and `AuditEventType`
 --> src\commands\vault_commands.rs:6:60
  |
6 | use crate::audit::{AuditRepository, SqliteAuditRepository, AuditEventRequest, AuditEventType, create_vault_access_granted_event, create_v...
  |                                                            ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `rusqlite::Connection`
  --> src\commands\vault_commands.rs:24:5
   |
24 | use rusqlite::Connection;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Arc`
  --> src\commands\vault_commands.rs:25:17
   |
25 | use std::sync::{Arc, Mutex};
   |                 ^^^

warning: unused import: `AppHandle`
  --> src\commands\vault_commands.rs:26:13
   |
26 | use tauri::{AppHandle, State};
   |             ^^^^^^^^^

warning: unused import: `warn`
  --> src\commands\vault_commands.rs:27:28
   |
27 | use tracing::{error, info, warn};
   |                            ^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> src\commands\vault_commands.rs:28:13
   |
28 | use serde::{Serialize, Deserialize};
   |             ^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `RecoveryExporter`
 --> src\commands\recovery_commands.rs:5:23
  |
5 | use crate::recovery::{RecoveryExporter, RecoveryImporter, RecoveryManifest, RecoveryImportRequest};
  |                       ^^^^^^^^^^^^^^^^

warning: unused import: `AuditRepository`
 --> src\commands\recovery_commands.rs:9:20
  |
9 | use crate::audit::{AuditRepository, SqliteAuditRepository};
  |                    ^^^^^^^^^^^^^^^

warning: unused import: `info`
  --> src\commands\recovery_commands.rs:13:22
   |
13 | use tracing::{error, info};
   |                      ^^^^

warning: unused import: `error`
 --> src\commands\settings_commands.rs:9:15
  |
9 | use tracing::{error, info};
  |               ^^^^^

warning: unused imports: `ConflictResolutionData`, `FixResults`, `MetadataRelationship`, `SchemaDependency`, `SimilarAsset`, `SyncJobConfig`, `SyncProgress`, `TimePeriod`, `TransformationConfig`, `TransformationTemplate`, `UsageAnalytics`, and `WebhookStatus`
  --> src\commands\metadata_commands.rs:10:9
   |
10 |         FixResults, MetadataRelationship, SimilarAsset, SchemaDependency, TimePeriod,
   |         ^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^
11 |         UsageAnalytics, MetadataQuery, FieldStatsConfig, FieldStatistics, SearchConfig,
   |         ^^^^^^^^^^^^^^
...
16 |         ApiInfo, ExternalMappingConfig, WebhookConfig, WebhookStatus, ExternalSyncConfig,
   |                                                        ^^^^^^^^^^^^^
17 |         SyncResults, SyncJobConfig, SyncProgress, ConflictResolutionData, TransformationConfig,
   |                      ^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^
18 |         TransformationTemplate, MetadataCrudApi, MetadataQueryApi, MetadataBulkApi,
   |         ^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> src\commands\workflow_commands.rs:6:13
  |
6 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src\commands\workflow_commands.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `WorkflowService` and `WorkflowStateManager`
  --> src\commands\workflow_commands.rs:10:5
   |
10 |     WorkflowService, WorkflowStateManager, WorkflowType, WorkflowStepName, WorkflowData,
   |     ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::auth::SessionManager`
  --> src\commands\bulk_commands.rs:14:5
   |
14 | use crate::auth::SessionManager;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `security_commands::*`
  --> src\commands\mod.rs:30:9
   |
30 | pub use security_commands::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `workflow_commands::*`
  --> src\commands\mod.rs:31:9
   |
31 | pub use workflow_commands::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `association_commands::*`
  --> src\commands\mod.rs:32:9
   |
32 | pub use association_commands::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `bulk_commands::*`
  --> src\commands\mod.rs:33:9
   |
33 | pub use bulk_commands::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `User`
 --> src\handlers\auth_handler.rs:6:87
  |
6 | use crate::users::{CreateUserRequest, UserRepository, SqliteUserRepository, UserRole, User};
  |                                                                                       ^^^^

warning: unused imports: `SqliteUserRepository`, `UserInfo`, `UserRepository`, and `UserRole`
 --> src\handlers\user_handler.rs:4:20
  |
4 | use crate::users::{UserRepository, SqliteUserRepository, UserRole, UserInfo};
  |                    ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^

warning: unused import: `crate::database::Database`
 --> src\handlers\user_handler.rs:5:5
  |
5 | use crate::database::Database;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Asset`
 --> src\handlers\asset_handler.rs:3:92
  |
3 | use crate::assets::{AssetRepository, SqliteAssetRepository, CreateAssetRequest, AssetInfo, Asset, DashboardStats, AssetType};
  |                                                                                            ^^^^^

warning: unused import: `rusqlite::Connection`
 --> src\handlers\asset_handler.rs:6:5
  |
6 | use rusqlite::Connection;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `BranchRepository` and `SqliteBranchRepository`
 --> src\handlers\branch_handler.rs:4:23
  |
4 | use crate::branches::{BranchRepository, SqliteBranchRepository};
  |                       ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::database::Database`
 --> src\handlers\branch_handler.rs:5:5
  |
5 | use crate::database::Database;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `FirmwareRepository` and `SqliteFirmwareRepository`
 --> src\handlers\firmware_handler.rs:4:23
  |
4 | use crate::firmware::{FirmwareRepository, SqliteFirmwareRepository};
  |                       ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::database::Database`
 --> src\handlers\firmware_handler.rs:5:5
  |
5 | use crate::database::Database;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `UserRepository`
 --> src\handlers\vault_handler.rs:5:20
  |
5 | use crate::users::{UserRepository, SqliteUserRepository, UserRole};
  |                    ^^^^^^^^^^^^^^

warning: unused imports: `AuditEventRequest`, `AuditEventType`, and `AuditRepository`
 --> src\handlers\vault_handler.rs:6:20
  |
6 | use crate::audit::{AuditRepository, SqliteAuditRepository, AuditEventRequest, AuditEventType};
  |                    ^^^^^^^^^^^^^^^                         ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused imports: `BatchRotationService`, `CategoryWithChildren`, `CreateCategoryRequest`, `CreatePermissionRequest`, `CreateRotationBatchRequest`, `DeleteVaultSecretRequest`, `GeneratePasswordRequest`, `GrantVaultAccessRequest`, `PasswordHistory`, `PasswordRotationHistory`, `PasswordRotationRequest`, `PasswordRotationService`, `PermissionRequest`, `PermissionType`, `RevokeVaultAccessRequest`, `RotationBatch`, `RotationSchedule`, `RotationScheduler`, `UpdateRotationScheduleRequest`, `UpdateStandaloneCredentialRequest`, `UpdateVaultSecretRequest`, `VaultAccessInfo`, `VaultAccessLog`, and `VaultPermission`
  --> src\handlers\vault_handler.rs:10:20
   |
10 |     IdentityVault, GeneratePasswordRequest, UpdateCredentialPasswordRequest, UpdateVaultSecretRequest,
   |                    ^^^^^^^^^^^^^^^^^^^^^^^                                   ^^^^^^^^^^^^^^^^^^^^^^^^
11 |     DeleteVaultSecretRequest, PasswordStrength, PasswordHistory, PasswordGenerator, PasswordStrengthAnalyzer,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^                    ^^^^^^^^^^^^^^^
12 |     CreateStandaloneCredentialRequest, UpdateStandaloneCredentialRequest, SearchCredentialsRequest,
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |     CreateCategoryRequest, StandaloneCredentialInfo, CategoryWithChildren,
   |     ^^^^^^^^^^^^^^^^^^^^^                            ^^^^^^^^^^^^^^^^^^^^
14 |     PermissionType, VaultAccessInfo, GrantVaultAccessRequest, VaultPermission, RevokeVaultAccessRequest,
   |     ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^
15 |     VaultAccessLog, CreatePermissionRequest, PermissionRequest,
   |     ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
16 |     rotation::{
17 |         PasswordRotationService, PasswordRotationRequest, RotationScheduler, RotationSchedule,
   |         ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
18 |         RotationBatch, BatchRotationService, PasswordRotationHistory, CreateRotationBatchRequest,
   |         ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |         UpdateRotationScheduleRequest
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `rusqlite::Connection`
  --> src\handlers\vault_handler.rs:24:5
   |
24 | use rusqlite::Connection;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> src\handlers\vault_handler.rs:25:17
   |
25 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `warn`
  --> src\handlers\vault_handler.rs:26:28
   |
26 | use tracing::{error, info, warn};
   |                            ^^^^

warning: unused imports: `RecoveryExporter` and `RecoveryImporter`
 --> src\handlers\recovery_handler.rs:4:23
  |
4 | use crate::recovery::{RecoveryExporter, RecoveryImporter};
  |                       ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `crate::database::Database`
 --> src\handlers\recovery_handler.rs:5:5
  |
5 | use crate::database::Database;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `RetryPreferences`, `SqliteUserSettingsRepository`, `UserSettingsRepository`, `UserSettings`, and `settings_utils`
 --> src\handlers\settings_handler.rs:4:28
  |
4 | use crate::user_settings::{UserSettings, RetryPreferences, UserSettingsRepository, SqliteUserSettingsRepository, settings_utils};
  |                            ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `crate::database::Database`
 --> src\handlers\settings_handler.rs:5:5
  |
5 | use crate::database::Database;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `auth_handler::*`
  --> src\handlers\mod.rs:13:9
   |
13 | pub use auth_handler::*;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `user_handler::*`
  --> src\handlers\mod.rs:14:9
   |
14 | pub use user_handler::*;
   |         ^^^^^^^^^^^^^^^

warning: unused import: `asset_handler::*`
  --> src\handlers\mod.rs:15:9
   |
15 | pub use asset_handler::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `configuration_handler::*`
  --> src\handlers\mod.rs:16:9
   |
16 | pub use configuration_handler::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `branch_handler::*`
  --> src\handlers\mod.rs:17:9
   |
17 | pub use branch_handler::*;
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `firmware_handler::*`
  --> src\handlers\mod.rs:18:9
   |
18 | pub use firmware_handler::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `vault_handler::*`
  --> src\handlers\mod.rs:19:9
   |
19 | pub use vault_handler::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `recovery_handler::*`
  --> src\handlers\mod.rs:20:9
   |
20 | pub use recovery_handler::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `settings_handler::*`
  --> src\handlers\mod.rs:21:9
   |
21 | pub use settings_handler::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `system_handler::*`
  --> src\handlers\mod.rs:22:9
   |
22 | pub use system_handler::*;
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `workflow_handler::*`
  --> src\handlers\mod.rs:23:9
   |
23 | pub use workflow_handler::*;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `tauri::State`
  --> src\lib.rs:37:5
   |
37 | use tauri::State;
   |     ^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> src\lib.rs:39:13
   |
39 | use serde::{Serialize, Deserialize};
   |             ^^^^^^^^^  ^^^^^^^^^^^

warning: unused variable: `start_time`
   --> src\error_handling\circuit_breaker.rs:382:13
    |
382 |         let start_time = Instant::now();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `manual_actions`
   --> src\error_handling\recovery_coordinator.rs:141:29
    |
141 |                         let manual_actions = self.generate_manual_recovery_actions(&error);
    |                             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_manual_actions`

warning: unused variable: `operation_name`
   --> src\error_handling\recovery_coordinator.rs:173:9
    |
173 |         operation_name: &str,
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_operation_name`

warning: unused variable: `manual_actions`
   --> src\error_handling\recovery_coordinator.rs:241:25
    |
241 |                     let manual_actions = self.generate_manual_recovery_actions(&final_error);
    |                         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_manual_actions`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src\workflow\repository.rs:140:47
    |
140 |             Ok(self.row_to_workflow_state(row)?)
    |                     --------------------------^ the trait `From<WorkflowError>` is not implemented for `rusqlite::Error`
    |                     |
    |                     this can't be annotated with `?` because it has type `Result<_, WorkflowError>`
    |
note: `WorkflowError` needs to implement `Into<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `rusqlite::Error` implements `From<FromSqlError>`
              `rusqlite::Error` implements `From<std::ffi::NulError>`
              `rusqlite::Error` implements `From<std::str::Utf8Error>`

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> src\workflow\repository.rs:144:34
    |
144 |             Ok(state) => Ok(Some(state?)),
    |                                  ^^^^^^ the `?` operator cannot be applied to type `workflow::models::WorkflowState`
    |
    = help: the trait `Try` is not implemented for `workflow::models::WorkflowState`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src\workflow\repository.rs:163:47
    |
163 |             Ok(self.row_to_workflow_state(row)?)
    |                     --------------------------^ the trait `From<WorkflowError>` is not implemented for `rusqlite::Error`
    |                     |
    |                     this can't be annotated with `?` because it has type `Result<_, WorkflowError>`
    |
note: `WorkflowError` needs to implement `Into<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `rusqlite::Error` implements `From<FromSqlError>`
              `rusqlite::Error` implements `From<std::ffi::NulError>`
              `rusqlite::Error` implements `From<std::str::Utf8Error>`

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> src\workflow\repository.rs:168:25
    |
168 |             states.push(row.map_err(|e| WorkflowError::Database(e.to_string()))??);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `workflow::models::WorkflowState`
    |
    = help: the trait `Try` is not implemented for `workflow::models::WorkflowState`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src\workflow\repository.rs:233:49
    |
233 |             Ok(self.row_to_workflow_session(row)?)
    |                     ----------------------------^ the trait `From<WorkflowError>` is not implemented for `rusqlite::Error`
    |                     |
    |                     this can't be annotated with `?` because it has type `Result<_, WorkflowError>`
    |
note: `WorkflowError` needs to implement `Into<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `rusqlite::Error` implements `From<FromSqlError>`
              `rusqlite::Error` implements `From<std::ffi::NulError>`
              `rusqlite::Error` implements `From<std::str::Utf8Error>`

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> src\workflow\repository.rs:237:36
    |
237 |             Ok(session) => Ok(Some(session?)),
    |                                    ^^^^^^^^ the `?` operator cannot be applied to type `workflow::models::WorkflowSession`
    |
    = help: the trait `Try` is not implemented for `workflow::models::WorkflowSession`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
   --> src\workflow\repository.rs:282:47
    |
282 |             Ok(self.row_to_workflow_draft(row)?)
    |                     --------------------------^ the trait `From<WorkflowError>` is not implemented for `rusqlite::Error`
    |                     |
    |                     this can't be annotated with `?` because it has type `Result<_, WorkflowError>`
    |
note: `WorkflowError` needs to implement `Into<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `rusqlite::Error` implements `From<FromSqlError>`
              `rusqlite::Error` implements `From<std::ffi::NulError>`
              `rusqlite::Error` implements `From<std::str::Utf8Error>`

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> src\workflow\repository.rs:287:25
    |
287 |             drafts.push(row.map_err(|e| WorkflowError::Database(e.to_string()))??);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `workflow::models::WorkflowDraft`
    |
    = help: the trait `Try` is not implemented for `workflow::models::WorkflowDraft`

error[E0599]: no method named `log_workflow_event` found for struct `Arc<SqliteAuditRepository<'static>>` in the current scope
   --> src\workflow\service.rs:83:28
    |
83  |         self.audit_service.log_workflow_event(
    |         -------------------^^^^^^^^^^^^^^^^^^
    |
help: there is a method `log_event` with a similar name, but with different arguments
   --> src\audit\mod.rs:134:5
    |
134 |     fn log_event(&self, event: &AuditEventRequest) -> Result<AuditEvent>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `log_workflow_event` found for struct `Arc<SqliteAuditRepository<'static>>` in the current scope
   --> src\workflow\service.rs:127:28
    |
127 |         self.audit_service.log_workflow_event(
    |         -------------------^^^^^^^^^^^^^^^^^^
    |
help: there is a method `log_event` with a similar name, but with different arguments
   --> src\audit\mod.rs:134:5
    |
134 |     fn log_event(&self, event: &AuditEventRequest) -> Result<AuditEvent>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `log_workflow_event` found for struct `Arc<SqliteAuditRepository<'static>>` in the current scope
   --> src\workflow\service.rs:170:28
    |
170 |         self.audit_service.log_workflow_event(
    |         -------------------^^^^^^^^^^^^^^^^^^
    |
help: there is a method `log_event` with a similar name, but with different arguments
   --> src\audit\mod.rs:134:5
    |
134 |     fn log_event(&self, event: &AuditEventRequest) -> Result<AuditEvent>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `log_workflow_event` found for struct `Arc<SqliteAuditRepository<'static>>` in the current scope
   --> src\workflow\service.rs:216:28
    |
216 |         self.audit_service.log_workflow_event(
    |         -------------------^^^^^^^^^^^^^^^^^^
    |
help: there is a method `log_event` with a similar name, but with different arguments
   --> src\audit\mod.rs:134:5
    |
134 |     fn log_event(&self, event: &AuditEventRequest) -> Result<AuditEvent>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `create_asset_from_workflow` found for struct `Arc<SqliteAssetRepository<'static>>` in the current scope
   --> src\workflow\service.rs:254:43
    |
254 |         let asset_id = self.asset_service.create_asset_from_workflow(user_id, asset_data)
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `Arc<SqliteAssetRepository<'static>>`

error[E0599]: no method named `log_workflow_event` found for struct `Arc<SqliteAuditRepository<'static>>` in the current scope
   --> src\workflow\service.rs:266:28
    |
266 |         self.audit_service.log_workflow_event(
    |         -------------------^^^^^^^^^^^^^^^^^^
    |
help: there is a method `log_event` with a similar name, but with different arguments
   --> src\audit\mod.rs:134:5
    |
134 |     fn log_event(&self, event: &AuditEventRequest) -> Result<AuditEvent>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `log_workflow_event` found for struct `Arc<SqliteAuditRepository<'static>>` in the current scope
   --> src\workflow\service.rs:296:28
    |
296 |         self.audit_service.log_workflow_event(
    |         -------------------^^^^^^^^^^^^^^^^^^
    |
help: there is a method `log_event` with a similar name, but with different arguments
   --> src\audit\mod.rs:134:5
    |
134 |     fn log_event(&self, event: &AuditEventRequest) -> Result<AuditEvent>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `check_asset_permission` found for struct `Arc<SqliteAssetRepository<'static>>` in the current scope
   --> src\workflow\service.rs:351:18
    |
350 |               let has_parent_permission = self.asset_service
    |  _________________________________________-
351 | |                 .check_asset_permission(user_id, parent_id, "create_child")
    | |                 -^^^^^^^^^^^^^^^^^^^^^^ method not found in `Arc<SqliteAssetRepository<'static>>`
    | |_________________|
    |

error[E0599]: no method named `check_user_permission` found for struct `Arc<SessionManager>` in the current scope
   --> src\workflow\service.rs:396:14
    |
395 |           let has_permission = self.auth_service
    |  ______________________________-
396 | |             .check_user_permission(user_id, permission)
    | |             -^^^^^^^^^^^^^^^^^^^^^ method not found in `Arc<SessionManager>`
    | |_____________|
    |

error: future cannot be sent between threads safely
   --> src\workflow\state.rs:159:35
    |
159 |           let handle = tokio::spawn(async move {
    |  ___________________________________^
160 | |             let mut cleanup_interval = interval(Duration::from_secs(300)); // 5 minutes
161 | |             
162 | |             loop {
...   |
169 | |         });
    | |_________^ future created by async block is not `Send`
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: captured value is not `Send`
   --> src\workflow\state.rs:165:33
    |
165 |                 if let Err(e) = state_manager.cleanup_expired_sessions().await {
    |                                 ^^^^^^^^^^^^^ has type `Arc<WorkflowStateManager>` which is not `Send`
note: required by a bound in `tokio::spawn`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tokio-1.47.0\src\task\spawn.rs:168:21
    |
166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
167 |     where
168 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src\workflow\state.rs:159:35
    |
159 |           let handle = tokio::spawn(async move {
    |  ___________________________________^
160 | |             let mut cleanup_interval = interval(Duration::from_secs(300)); // 5 minutes
161 | |             
162 | |             loop {
...   |
169 | |         });
    | |_________^ future created by async block is not `Send`
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: captured value is not `Send`
   --> src\workflow\state.rs:165:33
    |
165 |                 if let Err(e) = state_manager.cleanup_expired_sessions().await {
    |                                 ^^^^^^^^^^^^^ has type `Arc<WorkflowStateManager>` which is not `Send`
note: required by a bound in `tokio::spawn`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tokio-1.47.0\src\task\spawn.rs:168:21
    |
166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
167 |     where
168 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

warning: unused variable: `state`
   --> src\workflow\state.rs:193:21
    |
193 |         if let Some(state) = workflows.get(workflow_id) {
    |                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

error: future cannot be sent between threads safely
   --> src\workflow\state.rs:223:41
    |
223 |           let timer_handle = tokio::spawn(async move {
    |  _________________________________________^
224 | |             let mut auto_save_interval = interval(Duration::from_secs(DEFAULT_AUTO_SAVE_INTERVAL as u64));
225 | |             
226 | |             loop {
...   |
239 | |         });
    | |_________^ future created by async block is not `Send`
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: captured value is not `Send`
   --> src\workflow\state.rs:230:20
    |
230 |                 if state_manager.get_workflow_state(&workflow_id_clone).await.unwrap_or(None).is_none() {
    |                    ^^^^^^^^^^^^^ has type `WorkflowStateManager` which is not `Send`
note: required by a bound in `tokio::spawn`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tokio-1.47.0\src\task\spawn.rs:168:21
    |
166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
167 |     where
168 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src\workflow\state.rs:223:41
    |
223 |           let timer_handle = tokio::spawn(async move {
    |  _________________________________________^
224 | |             let mut auto_save_interval = interval(Duration::from_secs(DEFAULT_AUTO_SAVE_INTERVAL as u64));
225 | |             
226 | |             loop {
...   |
239 | |         });
    | |_________^ future created by async block is not `Send`
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: captured value is not `Send`
   --> src\workflow\state.rs:230:20
    |
230 |                 if state_manager.get_workflow_state(&workflow_id_clone).await.unwrap_or(None).is_none() {
    |                    ^^^^^^^^^^^^^ has type `WorkflowStateManager` which is not `Send`
note: required by a bound in `tokio::spawn`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tokio-1.47.0\src\task\spawn.rs:168:21
    |
166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
167 |     where
168 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error[E0599]: the method `get` exists for struct `HashMap<WorkflowStepName, Vec<ValidationRule>>`, but its trait bounds were not satisfied
  --> src\workflow\validation.rs:65:52
   |
65 |         if let Some(rules) = self.validation_rules.get(step_name) {
   |                                                    ^^^ method cannot be called on `HashMap<WorkflowStepName, Vec<ValidationRule>>` due to unsatisfied trait bounds
   |
  ::: src\workflow\mod.rs:90:1
   |
90 | pub enum WorkflowStepName {
   | ------------------------- doesn't satisfy `WorkflowStepName: Hash` or `WorkflowStepName: std::cmp::Eq`
   |
   = note: the following trait bounds were not satisfied:
           `WorkflowStepName: std::cmp::Eq`
           `WorkflowStepName: Hash`
help: consider annotating `WorkflowStepName` with `#[derive(Eq, Hash, PartialEq)]`
  --> src\workflow\mod.rs:90:1
   |
90 + #[derive(Eq, Hash, PartialEq)]
91 | pub enum WorkflowStepName {
   |

warning: unused variable: `errors`
   --> src\workflow\validation.rs:422:9
    |
422 |         errors: &mut Vec<ValidationError>,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_errors`

warning: unused variable: `session`
    --> src\commands\vault_commands.rs:1283:9
     |
1283 |     let session = match session_manager_guard.validate_session(&token) {
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1286:13
     |
1286 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1318:13
     |
1318 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `session`
    --> src\commands\vault_commands.rs:1359:9
     |
1359 |     let session = match session_manager_guard.validate_session(&token) {
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1362:13
     |
1362 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `session`
    --> src\commands\vault_commands.rs:1698:9
     |
1698 |     let session = match session_manager_guard.validate_session(&token) {
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1701:13
     |
1701 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1732:13
     |
1732 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1775:13
     |
1775 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `session`
    --> src\commands\vault_commands.rs:1811:9
     |
1811 |     let session = match session_manager_guard.validate_session(&token) {
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1814:13
     |
1814 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `session`
    --> src\commands\vault_commands.rs:1842:9
     |
1842 |     let session = match session_manager_guard.validate_session(&token) {
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1845:13
     |
1845 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `e`
    --> src\commands\vault_commands.rs:1879:13
     |
1879 |         Err(e) => return Err("Session validation error".to_string()),
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `schema_name`
   --> src\commands\metadata_commands.rs:360:9
    |
360 |     let schema_name = repo.get_metadata_schema_by_id(schema_id)
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema_name`

warning: unused variable: `db_state`
  --> src\commands\security_commands.rs:67:5
   |
67 |     db_state: State<'_, DatabaseState>,
   |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_state`

warning: unused variable: `session`
  --> src\commands\security_commands.rs:73:9
   |
73 |     let session = match session_manager.validate_session(&token) {
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `db_state`
   --> src\commands\security_commands.rs:101:5
    |
101 |     db_state: State<'_, DatabaseState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_state`

warning: unused variable: `session`
   --> src\commands\security_commands.rs:107:9
    |
107 |     let session = match session_manager.validate_session(&token) {
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `db_state`
   --> src\commands\security_commands.rs:202:5
    |
202 |     db_state: State<'_, DatabaseState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_state`

warning: unused variable: `session`
   --> src\commands\security_commands.rs:208:9
    |
208 |     let session = match session_manager.validate_session(&token) {
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `db_state`
   --> src\commands\security_commands.rs:235:5
    |
235 |     db_state: State<'_, DatabaseState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_state`

warning: unused variable: `session`
   --> src\commands\security_commands.rs:241:9
    |
241 |     let session = match session_manager.validate_session(&token) {
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `validator`
   --> src\commands\security_commands.rs:282:9
    |
282 |     let validator = SecurityValidator::new();
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_validator`

warning: unused variable: `db_state`
   --> src\commands\security_commands.rs:300:5
    |
300 |     db_state: State<'_, DatabaseState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_state`

warning: unused variable: `session`
   --> src\commands\security_commands.rs:306:9
    |
306 |     let session = match session_manager.validate_session(&token) {
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `db_state`
   --> src\commands\security_commands.rs:332:5
    |
332 |     db_state: State<'_, DatabaseState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_state`

warning: unused variable: `db_state`
   --> src\commands\security_commands.rs:378:5
    |
378 |     db_state: State<'_, DatabaseState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_state`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:22:23
    |
22  |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:22:23
    |
22  |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:55:23
    |
55  |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:55:23
    |
55  |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:71:23
    |
71  |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:71:23
    |
71  |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:99:23
    |
99  |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:99:23
    |
99  |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:115:23
    |
115 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:115:23
    |
115 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:129:23
    |
129 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:129:23
    |
129 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:145:23
    |
145 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:145:23
    |
145 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:160:23
    |
160 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:160:23
    |
160 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:176:23
    |
176 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:176:23
    |
176 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:190:23
    |
190 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:190:23
    |
190 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:206:23
    |
206 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:206:23
    |
206 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:229:23
    |
229 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:229:23
    |
229 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:244:23
    |
244 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:244:23
    |
244 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:265:23
    |
265 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:265:23
    |
265 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:288:23
    |
288 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:288:23
    |
288 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:304:23
    |
304 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:304:23
    |
304 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:319:23
    |
319 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:319:23
    |
319 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:334:23
    |
334 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:334:23
    |
334 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:347:23
    |
347 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<rusqlite::inner_connection::InnerConnection>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<rusqlite::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0277]: `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
   --> src\commands\workflow_commands.rs:347:23
    |
347 |     workflow_handler: State<'_, WorkflowHandler>,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>` cannot be shared between threads safely
    |
    = help: within `SqliteAssetRepository<'static>`, the trait `std::marker::Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, rusqlite::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: required because it appears within the type `rusqlite::cache::StatementCache`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\cache.rs:61:12
    |
61  | pub struct StatementCache(RefCell<LruCache<Arc<str>, RawStatement>>);
    |            ^^^^^^^^^^^^^^
note: required because it appears within the type `Connection`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:377:12
    |
377 | pub struct Connection {
    |            ^^^^^^^^^^
    = note: required because it appears within the type `&'static Connection`
note: required because it appears within the type `SqliteAssetRepository<'static>`
   --> src\assets\mod.rs:152:12
    |
152 | pub struct SqliteAssetRepository<'a> {
    |            ^^^^^^^^^^^^^^^^^^^^^
    = note: required for `Arc<SqliteAssetRepository<'static>>` to implement `std::marker::Sync`
note: required because it appears within the type `WorkflowService`
   --> src\workflow\service.rs:22:12
    |
22  | pub struct WorkflowService {
    |            ^^^^^^^^^^^^^^^
    = note: required for `Arc<WorkflowService>` to implement `Send`
note: required because it appears within the type `WorkflowHandler`
   --> src\handlers\workflow_handler.rs:13:12
    |
13  | pub struct WorkflowHandler {
    |            ^^^^^^^^^^^^^^^
note: required by a bound in `tauri::State`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\tauri-2.7.0\src\state.rs:21:25
    |
21  | pub struct State<'r, T: Send + Sync + 'static>(&'r T);
    |                         ^^^^ required by this bound in `State`

error[E0599]: no method named `start_workflow` found for struct `tauri::State` in the current scope
  --> src\commands\workflow_commands.rs:46:22
   |
46 |     workflow_handler.start_workflow(user_id, request).await
   |                      ^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `get_workflow_state` found for struct `tauri::State` in the current scope
  --> src\commands\workflow_commands.rs:60:22
   |
60 |     workflow_handler.get_workflow_state(user_id, &workflow_id).await
   |                      ^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `update_workflow_step` found for struct `tauri::State` in the current scope
  --> src\commands\workflow_commands.rs:89:22
   |
89 |     workflow_handler.update_workflow_step(user_id, request).await
   |                      ^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `advance_workflow_step` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:106:22
    |
106 |     workflow_handler.advance_workflow_step(user_id, &workflow_id, target_step).await
    |                      ^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `resume_workflow` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:120:22
    |
120 |     workflow_handler.resume_workflow(user_id, &workflow_id).await
    |                      ^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `complete_workflow` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:136:22
    |
136 |     workflow_handler.complete_workflow(user_id, request).await
    |                      ^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `cancel_workflow` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:150:22
    |
150 |     workflow_handler.cancel_workflow(user_id, &workflow_id).await
    |                      ^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `save_workflow_draft` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:168:22
    |
168 |     workflow_handler.save_workflow_draft(user_id, &workflow_id, draft_data).await
    |                      ^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `get_workflow_drafts` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:181:22
    |
181 |     workflow_handler.get_workflow_drafts(user_id).await
    |                      ^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `delete_workflow_draft` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:195:22
    |
195 |     workflow_handler.delete_workflow_draft(user_id, &workflow_id).await
    |                      ^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `validate_workflow_step` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:221:22
    |
221 |     workflow_handler.validate_workflow_step(user_id, request).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `get_active_workflows_for_user` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:234:22
    |
234 |     workflow_handler.get_active_workflows_for_user(user_id).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `validate_asset_creation_permissions` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:256:22
    |
256 |     workflow_handler.validate_asset_creation_permissions(user_id, parent_id).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `validate_security_classification` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:279:22
    |
279 |     workflow_handler.validate_security_classification(asset_name, security_classification).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `validate_naming_compliance` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:293:22
    |
293 |     workflow_handler.validate_naming_compliance(&asset_name).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `audit_workflow_operation` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:309:22
    |
309 |     workflow_handler.audit_workflow_operation(user_id, &workflow_id, &operation, details.as_deref()).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `get_workflow_step_data` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:326:22
    |
326 |     workflow_handler.get_workflow_step_data(user_id, &workflow_id, step_name).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `get_resumable_workflows` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:339:22
    |
339 |     workflow_handler.get_resumable_workflows(user_id).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `has_resumable_workflows` found for struct `tauri::State` in the current scope
   --> src\commands\workflow_commands.rs:352:22
    |
352 |     workflow_handler.has_resumable_workflows(user_id).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^ method not found in `State<'_, WorkflowHandler>`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
  --> src\commands\association_commands.rs:23:25
   |
23 |     if !session_manager.inner().has_active_session() {
   |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
  --> src\commands\association_commands.rs:31:36
   |
31 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
   |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
  --> src\commands\association_commands.rs:47:25
   |
47 |     if !session_manager.inner().has_active_session() {
   |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
  --> src\commands\association_commands.rs:55:36
   |
55 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
   |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
  --> src\commands\association_commands.rs:71:25
   |
71 |     if !session_manager.inner().has_active_session() {
   |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
  --> src\commands\association_commands.rs:79:36
   |
79 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
   |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
  --> src\commands\association_commands.rs:96:25
   |
96 |     if !session_manager.inner().has_active_session() {
   |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:104:36
    |
104 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:121:25
    |
121 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:129:36
    |
129 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:152:25
    |
152 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:160:36
    |
160 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:175:25
    |
175 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:183:36
    |
183 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:199:25
    |
199 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:207:36
    |
207 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:225:25
    |
225 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:233:36
    |
233 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:256:25
    |
256 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:264:36
    |
264 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:282:25
    |
282 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:290:36
    |
290 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:310:25
    |
310 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:318:36
    |
318 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0599]: no method named `inner` found for struct `std::sync::MutexGuard<'_, SessionManager>` in the current scope
   --> src\commands\association_commands.rs:334:25
    |
334 |     if !session_manager.inner().has_active_session() {
    |                         ^^^^^ method not found in `MutexGuard<'_, SessionManager>`

error[E0599]: no method named `map_err` found for reference `&Connection` in the current scope
   --> src\commands\association_commands.rs:342:36
    |
342 |     let conn = db.get_connection().map_err(|e| format!("Database connection failed: {}", e))?;
    |                                    ^^^^^^^ method not found in `&Connection`

error[E0616]: field `conn` of struct `Database` is private
  --> src\commands\bulk_commands.rs:53:57
   |
53 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
   |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
  --> src\commands\bulk_commands.rs:83:57
   |
83 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
   |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:113:57
    |
113 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:145:57
    |
145 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:200:57
    |
200 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:236:57
    |
236 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:244:53
    |
244 |     let asset_repo = SqliteAssetRepository::new(&db.conn);
    |                                                     ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:280:57
    |
280 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:288:53
    |
288 |     let asset_repo = SqliteAssetRepository::new(&db.conn);
    |                                                     ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:348:57
    |
348 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:404:57
    |
404 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:437:57
    |
437 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:470:57
    |
470 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:500:57
    |
500 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:532:57
    |
532 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:563:57
    |
563 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:595:57
    |
595 |     let bulk_repo = SqliteBulkImportRepository::new(&db.conn);
    |                                                         ^^^^ private field

warning: unused variable: `app`
   --> src\commands\bulk_commands.rs:617:5
    |
617 |     app: AppHandle,
    |     ^^^ help: if this is intentional, prefix it with an underscore: `_app`

warning: unused variable: `db_state`
   --> src\commands\bulk_commands.rs:618:5
    |
618 |     db_state: State<'_, DatabaseState>,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_state`

error[E0616]: field `conn` of struct `Database` is private
   --> src\commands\bulk_commands.rs:965:65
    |
965 |     let bulk_ops_repo = SqliteBulkOperationsRepository::new(&db.conn);
    |                                                                 ^^^^ private field

error[E0308]: mismatched types
   --> src\commands\bulk_commands.rs:968:68
    |
968 |     let operation_id = service.create_bulk_move_operation(request, current_user.id)
    |                                --------------------------          ^^^^^^^^^^^^^^^ expected `i32`, found `i64`
    |                                |
    |                                arguments to this method are incorrect
    |
note: method defined here
   --> src\bulk\operations.rs:595:12
    |
595 |     pub fn create_bulk_move_operation(&self, request: BulkMoveRequest, user_id: i32) -> Result<String> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^                                  ------------
help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit
    |
968 |     let operation_id = service.create_bulk_move_operation(request, current_user.id.try_into().unwrap())
    |                                                                                   ++++++++++++++++++++

error[E0616]: field `conn` of struct `Database` is private
    --> src\commands\bulk_commands.rs:1010:65
     |
1010 |     let bulk_ops_repo = SqliteBulkOperationsRepository::new(&db.conn);
     |                                                                 ^^^^ private field

error[E0308]: mismatched types
    --> src\commands\bulk_commands.rs:1013:70
     |
1013 |     let operation_id = service.create_bulk_delete_operation(request, current_user.id)
     |                                ----------------------------          ^^^^^^^^^^^^^^^ expected `i32`, found `i64`
     |                                |
     |                                arguments to this method are incorrect
     |
note: method defined here
    --> src\bulk\operations.rs:616:12
     |
616  |     pub fn create_bulk_delete_operation(&self, request: BulkDeleteRequest, user_id: i32) -> Result<String> {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                    ------------
help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit
     |
1013 |     let operation_id = service.create_bulk_delete_operation(request, current_user.id.try_into().unwrap())
     |                                                                                     ++++++++++++++++++++

error[E0616]: field `conn` of struct `Database` is private
    --> src\commands\bulk_commands.rs:1061:65
     |
1061 |     let bulk_ops_repo = SqliteBulkOperationsRepository::new(&db.conn);
     |                                                                 ^^^^ private field

error[E0308]: mismatched types
    --> src\commands\bulk_commands.rs:1064:70
     |
1064 |     let operation_id = service.create_bulk_export_operation(request, current_user.id)
     |                                ----------------------------          ^^^^^^^^^^^^^^^ expected `i32`, found `i64`
     |                                |
     |                                arguments to this method are incorrect
     |
note: method defined here
    --> src\bulk\operations.rs:637:12
     |
637  |     pub fn create_bulk_export_operation(&self, request: BulkExportRequest, user_id: i32) -> Result<String> {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                    ------------
help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit
     |
1064 |     let operation_id = service.create_bulk_export_operation(request, current_user.id.try_into().unwrap())
     |                                                                                     ++++++++++++++++++++

error[E0616]: field `conn` of struct `Database` is private
    --> src\commands\bulk_commands.rs:1104:65
     |
1104 |     let bulk_ops_repo = SqliteBulkOperationsRepository::new(&db.conn);
     |                                                                 ^^^^ private field

error[E0308]: mismatched types
    --> src\commands\bulk_commands.rs:1107:72
     |
1107 |     let operation_id = service.create_bulk_classify_operation(request, current_user.id)
     |                                ------------------------------          ^^^^^^^^^^^^^^^ expected `i32`, found `i64`
     |                                |
     |                                arguments to this method are incorrect
     |
note: method defined here
    --> src\bulk\operations.rs:658:12
     |
658  |     pub fn create_bulk_classify_operation(&self, request: BulkClassifyRequest, user_id: i32) -> Result<String> {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                      ------------
help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit
     |
1107 |     let operation_id = service.create_bulk_classify_operation(request, current_user.id.try_into().unwrap())
     |                                                                                       ++++++++++++++++++++

error[E0616]: field `conn` of struct `Database` is private
    --> src\commands\bulk_commands.rs:1139:65
     |
1139 |     let bulk_ops_repo = SqliteBulkOperationsRepository::new(&db.conn);
     |                                                                 ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
    --> src\commands\bulk_commands.rs:1173:65
     |
1173 |     let bulk_ops_repo = SqliteBulkOperationsRepository::new(&db.conn);
     |                                                                 ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
    --> src\commands\bulk_commands.rs:1209:65
     |
1209 |     let bulk_ops_repo = SqliteBulkOperationsRepository::new(&db.conn);
     |                                                                 ^^^^ private field

error[E0616]: field `conn` of struct `Database` is private
    --> src\commands\bulk_commands.rs:1243:68
     |
1243 |     let asset_repo = crate::assets::SqliteAssetRepository::new(&db.conn);
     |                                                                    ^^^^ private field

error[E0560]: struct `operations::ValidationError` has no field named `suggested_action`
    --> src\commands\bulk_commands.rs:1261:21
     |
1261 |                     suggested_action: Some("Remove from selection".to_string()),
     |                     ^^^^^^^^^^^^^^^^ `operations::ValidationError` does not have this field
     |
     = note: available fields are: `blocking`

error[E0560]: struct `operations::ValidationError` has no field named `suggested_action`
    --> src\commands\bulk_commands.rs:1271:21
     |
1271 |                     suggested_action: Some("Check permissions".to_string()),
     |                     ^^^^^^^^^^^^^^^^ `operations::ValidationError` does not have this field
     |
     = note: available fields are: `blocking`

error[E0560]: struct `operations::ValidationError` has no field named `suggested_action`
    --> src\commands\bulk_commands.rs:1289:25
     |
1289 |                         suggested_action: Some("Select a folder as parent".to_string()),
     |                         ^^^^^^^^^^^^^^^^ `operations::ValidationError` does not have this field
     |
     = note: available fields are: `blocking`

error[E0560]: struct `operations::ValidationError` has no field named `suggested_action`
    --> src\commands\bulk_commands.rs:1300:21
     |
1300 |                     suggested_action: Some("Select a valid parent folder".to_string()),
     |                     ^^^^^^^^^^^^^^^^ `operations::ValidationError` does not have this field
     |
     = note: available fields are: `blocking`

error[E0560]: struct `operations::ValidationError` has no field named `suggested_action`
    --> src\commands\bulk_commands.rs:1310:21
     |
1310 |                     suggested_action: Some("Check parent folder permissions".to_string()),
     |                     ^^^^^^^^^^^^^^^^ `operations::ValidationError` does not have this field
     |
     = note: available fields are: `blocking`

error[E0560]: struct `operations::ValidationError` has no field named `suggested_action`
    --> src\commands\bulk_commands.rs:1326:21
     |
1326 |                     suggested_action: Some("Remove from selection or choose different parent".to_string()),
     |                     ^^^^^^^^^^^^^^^^ `operations::ValidationError` does not have this field
     |
     = note: available fields are: `blocking`

warning: unused variable: `app`
    --> src\commands\bulk_commands.rs:1338:5
     |
1338 |     app: AppHandle,
     |     ^^^ help: if this is intentional, prefix it with an underscore: `_app`

warning: unused variable: `db`
    --> src\commands\bulk_commands.rs:1353:9
     |
1353 |     let db = db_guard
     |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `app`
    --> src\commands\bulk_commands.rs:1370:5
     |
1370 |     app: AppHandle,
     |     ^^^ help: if this is intentional, prefix it with an underscore: `_app`

warning: unused variable: `format`
    --> src\commands\bulk_commands.rs:1374:5
     |
1374 |     format: String,
     |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_format`

warning: unused variable: `db`
    --> src\commands\bulk_commands.rs:1386:9
     |
1386 |     let db = db_guard
     |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `app`
    --> src\commands\bulk_commands.rs:1403:5
     |
1403 |     app: AppHandle,
     |     ^^^ help: if this is intentional, prefix it with an underscore: `_app`

warning: unused variable: `classification`
    --> src\commands\bulk_commands.rs:1407:5
     |
1407 |     classification: String,
     |     ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_classification`

warning: unused variable: `db`
    --> src\commands\bulk_commands.rs:1419:9
     |
1419 |     let db = db_guard
     |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `app`
    --> src\commands\bulk_commands.rs:1436:5
     |
1436 |     app: AppHandle,
     |     ^^^ help: if this is intentional, prefix it with an underscore: `_app`

warning: unused variable: `db`
    --> src\commands\bulk_commands.rs:1451:9
     |
1451 |     let db = db_guard
     |         ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `state`
   --> src\handlers\workflow_handler.rs:133:21
    |
133 |         if let Some(state) = self.state_manager.get_workflow_state(&request.workflow_id).await? {
    |                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `request`
   --> src\handlers\workflow_handler.rs:200:9
    |
200 |         request: ValidateWorkflowStepRequest,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: unused variable: `asset_name`
   --> src\handlers\workflow_handler.rs:233:9
    |
233 |         asset_name: &str,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_asset_name`

warning: unused variable: `classification`
   --> src\handlers\workflow_handler.rs:234:9
    |
234 |         classification: &str,
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_classification`

warning: variable does not need to be mutable
   --> src\handlers\workflow_handler.rs:250:13
    |
250 |         let mut warnings = Vec::new();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

error[E0063]: missing fields `created_at` and `is_active` in initializer of `UserInfo`
   --> src\auth\mod.rs:152:29
    |
152 |                 return Some(UserInfo {
    |                             ^^^^^^^^ missing `created_at` and `is_active`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:310:48
    |
310 |         let data_json: String = row.get("data")?;
    |                                     -----------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                     |
    |                                     this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:313:65
    |
313 |         let workflow_type_str: String = row.get("workflow_type")?;
    |                                             --------------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                             |
    |                                             this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:316:55
    |
316 |         let step_str: String = row.get("current_step")?;
    |                                    -------------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                    |
    |                                    this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:319:51
    |
319 |         let status_str: String = row.get("status")?;
    |                                      -------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                      |
    |                                      this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:322:59
    |
322 |         let created_at_str: String = row.get("created_at")?;
    |                                          -----------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                          |
    |                                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:323:79
    |
323 |         let created_at = chrono::DateTime::parse_from_rfc3339(&created_at_str)?.with_timezone(&chrono::Utc);
    |                          -----------------------------------------------------^ the trait `From<chrono::ParseError>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, chrono::ParseError>`
    |
note: `WorkflowError` needs to implement `From<chrono::ParseError>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:325:59
    |
325 |         let updated_at_str: String = row.get("updated_at")?;
    |                                          -----------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                          |
    |                                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:326:79
    |
326 |         let updated_at = chrono::DateTime::parse_from_rfc3339(&updated_at_str)?.with_timezone(&chrono::Utc);
    |                          -----------------------------------------------------^ the trait `From<chrono::ParseError>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, chrono::ParseError>`
    |
note: `WorkflowError` needs to implement `From<chrono::ParseError>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:329:73
    |
329 |             Some(chrono::DateTime::parse_from_rfc3339(&completed_at_str)?.with_timezone(&chrono::Utc))
    |                  -------------------------------------------------------^ the trait `From<chrono::ParseError>` is not implemented for `WorkflowError`
    |                  |
    |                  this can't be annotated with `?` because it has type `Result<_, chrono::ParseError>`
    |
note: `WorkflowError` needs to implement `From<chrono::ParseError>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:335:30
    |
335 |             id: row.get("id")?,
    |                     ---------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                     |
    |                     this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:338:40
    |
338 |             user_id: row.get("user_id")?,
    |                          --------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:349:65
    |
349 |         let auto_save_json: String = row.get("auto_save_config")?;
    |                                          -----------------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                          |
    |                                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:352:59
    |
352 |         let expires_at_str: String = row.get("expires_at")?;
    |                                          -----------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                          |
    |                                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:353:79
    |
353 |         let expires_at = chrono::DateTime::parse_from_rfc3339(&expires_at_str)?.with_timezone(&chrono::Utc);
    |                          -----------------------------------------------------^ the trait `From<chrono::ParseError>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, chrono::ParseError>`
    |
note: `WorkflowError` needs to implement `From<chrono::ParseError>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:355:59
    |
355 |         let created_at_str: String = row.get("created_at")?;
    |                                          -----------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                          |
    |                                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:356:79
    |
356 |         let created_at = chrono::DateTime::parse_from_rfc3339(&created_at_str)?.with_timezone(&chrono::Utc);
    |                          -----------------------------------------------------^ the trait `From<chrono::ParseError>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, chrono::ParseError>`
    |
note: `WorkflowError` needs to implement `From<chrono::ParseError>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:359:48
    |
359 |             workflow_id: row.get("workflow_id")?,
    |                              ------------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                              |
    |                              this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:360:52
    |
360 |             session_token: row.get("session_token")?,
    |                                --------------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                |
    |                                this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:361:40
    |
361 |             user_id: row.get("user_id")?,
    |                          --------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:370:60
    |
370 |         let draft_data_json: String = row.get("draft_data")?;
    |                                           -----------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                           |
    |                                           this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:373:59
    |
373 |         let created_at_str: String = row.get("created_at")?;
    |                                          -----------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                          |
    |                                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:374:79
    |
374 |         let created_at = chrono::DateTime::parse_from_rfc3339(&created_at_str)?.with_timezone(&chrono::Utc);
    |                          -----------------------------------------------------^ the trait `From<chrono::ParseError>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, chrono::ParseError>`
    |
note: `WorkflowError` needs to implement `From<chrono::ParseError>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:376:59
    |
376 |         let updated_at_str: String = row.get("updated_at")?;
    |                                          -----------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                                          |
    |                                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:377:79
    |
377 |         let updated_at = chrono::DateTime::parse_from_rfc3339(&updated_at_str)?.with_timezone(&chrono::Utc);
    |                          -----------------------------------------------------^ the trait `From<chrono::ParseError>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, chrono::ParseError>`
    |
note: `WorkflowError` needs to implement `From<chrono::ParseError>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:380:30
    |
380 |             id: row.get("id")?,
    |                     ---------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                     |
    |                     this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:381:48
    |
381 |             workflow_id: row.get("workflow_id")?,
    |                              ------------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                              |
    |                              this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0277]: `?` couldn't convert the error to `WorkflowError`
   --> src\workflow\repository.rs:382:40
    |
382 |             user_id: row.get("user_id")?,
    |                          --------------^ the trait `From<rusqlite::Error>` is not implemented for `WorkflowError`
    |                          |
    |                          this can't be annotated with `?` because it has type `Result<_, rusqlite::Error>`
    |
note: `WorkflowError` needs to implement `From<rusqlite::Error>`
   --> src\workflow\mod.rs:26:1
    |
26  | pub enum WorkflowError {
    | ^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `WorkflowError` implements `From<anyhow::Error>`
              `WorkflowError` implements `From<serde_json::Error>`

error[E0599]: the method `insert` exists for struct `HashMap<WorkflowStepName, Vec<ValidationRule>>`, but its trait bounds were not satisfied
   --> src\workflow\validation.rs:460:31
    |
460 |         self.validation_rules.insert(WorkflowStepName::AssetTypeSelection, asset_type_rules);
    |                               ^^^^^^
    |
   ::: src\workflow\mod.rs:90:1
    |
90  | pub enum WorkflowStepName {
    | ------------------------- doesn't satisfy `WorkflowStepName: Hash` or `WorkflowStepName: std::cmp::Eq`
    |
    = note: the following trait bounds were not satisfied:
            `WorkflowStepName: std::cmp::Eq`
            `WorkflowStepName: Hash`
help: consider annotating `WorkflowStepName` with `#[derive(Eq, Hash, PartialEq)]`
   --> src\workflow\mod.rs:90:1
    |
90  + #[derive(Eq, Hash, PartialEq)]
91  | pub enum WorkflowStepName {
    |

error[E0599]: no method named `optional` found for enum `std::result::Result` in the current scope
   --> src\associations\mod.rs:386:14
    |
385 |           let asset_exists = stmt.query_row([request.asset_id], |_| Ok(()))
    |  ____________________________-
386 | |             .optional()?
    | |             -^^^^^^^^ method not found in `Result<(), Error>`
    | |_____________|
    |
    |
   ::: C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:279:8
    |
279 |       fn optional(self) -> Result<Option<T>>;
    |          -------- the method is available for `std::result::Result<(), rusqlite::Error>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `OptionalExtension` which provides `optional` is implemented but not in scope; perhaps you want to import it
    |
1   + use rusqlite::OptionalExtension;
    |

error[E0599]: no method named `optional` found for enum `std::result::Result` in the current scope
   --> src\associations\mod.rs:398:22
    |
397 |                   let file_exists = stmt.query_row([request.file_id], |_| Ok(()))
    |  ___________________________________-
398 | |                     .optional()?
    | |                     -^^^^^^^^ method not found in `Result<(), Error>`
    | |_____________________|
    |
    |
   ::: C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:279:8
    |
279 |       fn optional(self) -> Result<Option<T>>;
    |          -------- the method is available for `std::result::Result<(), rusqlite::Error>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `OptionalExtension` which provides `optional` is implemented but not in scope; perhaps you want to import it
    |
1   + use rusqlite::OptionalExtension;
    |

error[E0599]: no method named `optional` found for enum `std::result::Result` in the current scope
   --> src\associations\mod.rs:408:22
    |
407 |                   let file_exists = stmt.query_row([request.file_id], |_| Ok(()))
    |  ___________________________________-
408 | |                     .optional()?
    | |                     -^^^^^^^^ method not found in `Result<(), Error>`
    | |_____________________|
    |
    |
   ::: C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:279:8
    |
279 |       fn optional(self) -> Result<Option<T>>;
    |          -------- the method is available for `std::result::Result<(), rusqlite::Error>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `OptionalExtension` which provides `optional` is implemented but not in scope; perhaps you want to import it
    |
1   + use rusqlite::OptionalExtension;
    |

error[E0599]: no method named `optional` found for enum `std::result::Result` in the current scope
   --> src\associations\mod.rs:658:14
    |
657 |           let is_broken = stmt.query_row([association_id], |_| Ok(()))
    |  _________________________-
658 | |             .optional()?
    | |             -^^^^^^^^ method not found in `Result<(), Error>`
    | |_____________|
    |
    |
   ::: C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\lib.rs:279:8
    |
279 |       fn optional(self) -> Result<Option<T>>;
    |          -------- the method is available for `std::result::Result<(), rusqlite::Error>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `OptionalExtension` which provides `optional` is implemented but not in scope; perhaps you want to import it
    |
1   + use rusqlite::OptionalExtension;
    |

error[E0277]: the trait bound `Vec<&dyn ToSql>: rusqlite::Params` is not satisfied
   --> src\bulk\operations.rs:472:45
    |
472 |         let operation_iter = stmt.query_map(params, Self::row_to_operation)?;
    |                                   --------- ^^^^^^ the trait `rusqlite::Params` is not implemented for `Vec<&dyn ToSql>`
    |                                   |
    |                                   required by a bound introduced by this call
    |
    = help: the following other types implement trait `rusqlite::Params`:
              &[&T; 10]
              &[&T; 11]
              &[&T; 12]
              &[&T; 13]
              &[&T; 14]
              &[&T; 15]
              &[&T; 16]
              &[&T; 17]
            and 109 others
note: required by a bound in `Statement::<'_>::query_map`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\statement.rs:280:12
    |
278 |     pub fn query_map<T, P, F>(&mut self, params: P, f: F) -> Result<MappedRows<'_, F>>
    |            --------- required by a bound in this associated function
279 |     where
280 |         P: Params,
    |            ^^^^^^ required by this bound in `Statement::<'_>::query_map`

error[E0277]: the trait bound `Vec<&dyn ToSql>: rusqlite::Params` is not satisfied
   --> src\bulk\operations.rs:506:45
    |
506 |         let operation_iter = stmt.query_map(params, Self::row_to_operation)?;
    |                                   --------- ^^^^^^ the trait `rusqlite::Params` is not implemented for `Vec<&dyn ToSql>`
    |                                   |
    |                                   required by a bound introduced by this call
    |
    = help: the following other types implement trait `rusqlite::Params`:
              &[&T; 10]
              &[&T; 11]
              &[&T; 12]
              &[&T; 13]
              &[&T; 14]
              &[&T; 15]
              &[&T; 16]
              &[&T; 17]
            and 109 others
note: required by a bound in `Statement::<'_>::query_map`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\statement.rs:280:12
    |
278 |     pub fn query_map<T, P, F>(&mut self, params: P, f: F) -> Result<MappedRows<'_, F>>
    |            --------- required by a bound in this associated function
279 |     where
280 |         P: Params,
    |            ^^^^^^ required by this bound in `Statement::<'_>::query_map`

error[E0277]: the trait bound `Vec<&dyn ToSql>: rusqlite::Params` is not satisfied
   --> src\bulk\operations.rs:527:53
    |
527 |         let total_count: i32 = count_stmt.query_row(count_params, |row| row.get(0))?;
    |                                           --------- ^^^^^^^^^^^^ the trait `rusqlite::Params` is not implemented for `Vec<&dyn ToSql>`
    |                                           |
    |                                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `rusqlite::Params`:
              &[&T; 10]
              &[&T; 11]
              &[&T; 12]
              &[&T; 13]
              &[&T; 14]
              &[&T; 15]
              &[&T; 16]
              &[&T; 17]
            and 109 others
note: required by a bound in `Statement::<'_>::query_row`
   --> C:\Users\Zach\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rusqlite-0.31.0\src\statement.rs:376:12
    |
374 |     pub fn query_row<T, P, F>(&mut self, params: P, f: F) -> Result<T>
    |            --------- required by a bound in this associated function
375 |     where
376 |         P: Params,
    |            ^^^^^^ required by this bound in `Statement::<'_>::query_row`

error[E0277]: the trait bound `std::string::String: Borrow<&str>` is not satisfied
   --> src\commands\bulk_commands.rs:729:42
    |
729 |             if let Some(value) = row.get(required) {
    |                                      --- ^^^^^^^^ the trait `Borrow<&str>` is not implemented for `std::string::String`
    |                                      |
    |                                      required by a bound introduced by this call
    |
    = help: the trait `Borrow<&_>` is not implemented for `std::string::String`
            but trait `Borrow<_>` is implemented for it
    = help: for that trait implementation, expected `str`, found `&str`
note: required by a bound in `std::collections::HashMap::<K, V, S>::get`
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc\library\std\src\collections\hash\map.rs:905:5

warning: variable does not need to be mutable
   --> src\assets\mod.rs:427:25
    |
427 |             if let Some(mut children) = hierarchy_map.remove(&parent_id) {
    |                         ----^^^^^^^^
    |                         |
    |                         help: remove this `mut`

warning: unused variable: `asset`
   --> src\assets\mod.rs:464:13
    |
464 |         let asset = self.get_asset_by_id(request.asset_id)?
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_asset`

warning: unused variable: `error`
   --> src\error_handling\manual_recovery.rs:432:35
    |
432 |     fn generate_ui_actions(&self, error: &EnhancedError) -> Vec<ManualRecoveryAction> {
    |                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: unused variable: `services_tried`
   --> src\error_handling\service_provider.rs:518:62
    |
518 |     fn update_success_stats(&self, execution_time: Duration, services_tried: &[String]) {
    |                                                              ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_services_tried`

warning: unused variable: `services_tried`
   --> src\error_handling\service_provider.rs:535:62
    |
535 |     fn update_failure_stats(&self, execution_time: Duration, services_tried: &[String]) {
    |                                                              ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_services_tried`

warning: variable does not need to be mutable
   --> src\error_handling\offline_providers.rs:199:26
    |
199 |         let (data_bytes, mut metadata) = {
    |                          ----^^^^^^^^
    |                          |
    |                          help: remove this `mut`

warning: unused variable: `data_type`
   --> src\error_handling\enhanced_cache.rs:427:17
    |
427 |             Ok((data_type, source, data_bytes, cached_at, ttl_seconds, compressed, access_count)) => {
    |                 ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_data_type`

warning: unused variable: `access_count`
   --> src\error_handling\enhanced_cache.rs:427:84
    |
427 |             Ok((data_type, source, data_bytes, cached_at, ttl_seconds, compressed, access_count)) => {
    |                                                                                    ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_access_count`

warning: unused variable: `stats`
   --> src\error_handling\enhanced_cache.rs:760:17
    |
760 |         let mut stats = self.stats.lock().unwrap();
    |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_stats`

warning: unused variable: `duration`
   --> src\error_handling\enhanced_cache.rs:759:34
    |
759 |     fn update_store_stats(&self, duration: std::time::Duration) {
    |                                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_duration`

warning: variable does not need to be mutable
   --> src\error_handling\enhanced_cache.rs:760:13
    |
760 |         let mut stats = self.stats.lock().unwrap();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src\user_settings\mod.rs:520:13
    |
520 |         let mut migrated = false;
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `search_results` is never read
   --> src\metadata\search.rs:474:17
    |
474 |         let mut search_results = Vec::new();
    |                 ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `existing`
   --> src\metadata\api\crud.rs:380:21
    |
380 |         if let Some(existing) = self.repo.get_asset_metadata(target_id)
    |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_existing`

warning: unused variable: `asset_id`
   --> src\metadata\api\crud.rs:616:42
    |
616 |     fn get_asset_metadata_history(&self, asset_id: i64) -> Result<Vec<AssetMetadataHistory>, String> {
    |                                          ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_asset_id`

warning: unused variable: `asset_id`
   --> src\metadata\api\crud.rs:622:35
    |
622 |     fn find_related_assets(&self, asset_id: i64) -> Result<Vec<RelatedAsset>, String> {
    |                                   ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_asset_id`

warning: unused variable: `asset_id`
   --> src\metadata\api\crud.rs:628:40
    |
628 |     fn archive_metadata_history(&self, asset_id: i64) -> Result<(), String> {
    |                                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_asset_id`

warning: unused variable: `start_time`
   --> src\metadata\api\query.rs:279:13
    |
279 |         let start_time = Instant::now();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`

warning: unused variable: `filter_id`
   --> src\metadata\api\query.rs:446:13
    |
446 |         let filter_id = self.conn.execute(query, rusqlite::params![
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_filter_id`

warning: unused variable: `e`
   --> src\metadata\api\query.rs:476:27
    |
476 |                 .map_err(|e| rusqlite::Error::InvalidColumnType(0, "query_json".to_string(), rusqlite::types::Type::Text))?;
    |                           ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `e`
   --> src\metadata\api\query.rs:541:27
    |
541 |                 .map_err(|e| rusqlite::Error::InvalidColumnType(0, "query_json".to_string(), rusqlite::types::Type::Text))
    |                           ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `config`
   --> src\metadata\api\query.rs:663:43
    |
663 |     fn build_aggregation_query_sql(&self, config: &AggregationConfig) -> Result<(String, Vec<String>), String> {
    |                                           ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `config`
   --> src\metadata\api\query.rs:670:60
    |
670 |     fn calculate_field_statistics(&self, field_path: &str, config: &FieldStatsConfig) -> Result<FieldStatistics, String> {
    |                                                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `query`
   --> src\metadata\api\query.rs:693:38
    |
693 |     fn filter_assets_by_query(&self, query: &MetadataQuery, asset_ids: &[i64]) -> Result<Vec<Asset>, String> {
    |                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `schema`
   --> src\metadata\api\bulk.rs:315:17
    |
315 |             let schema = match self.repo.get_metadata_schema_by_id(validation_request.schema_id) {
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `values_json`
   --> src\metadata\api\bulk.rs:344:17
    |
344 |             let values_json = serde_json::to_string(&validation_request.metadata_values)
    |                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_values_json`

warning: variable does not need to be mutable
   --> src\metadata\api\bulk.rs:382:13
    |
382 |         let mut warnings = Vec::new();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src\metadata\api\bulk.rs:402:17
    |
402 |             let mut transaction = self.conn.unchecked_transaction()
    |                 ----^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src\metadata\api\bulk.rs:461:13
    |
461 |         let mut transaction = self.conn.unchecked_transaction()
    |             ----^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `schema`
   --> src\metadata\api\bulk.rs:639:13
    |
639 |         let schema = self.repo.get_metadata_schema_by_id(schema_id)
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `values_json`
   --> src\metadata\api\bulk.rs:643:13
    |
643 |         let values_json = serde_json::to_string(metadata_values)
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_values_json`

warning: unused variable: `transaction`
   --> src\metadata\api\bulk.rs:719:43
    |
719 |     fn archive_metadata_to_history(&self, transaction: &Transaction, asset_id: i64) -> Result<(), String> {
    |                                           ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transaction`

warning: unused variable: `asset_id`
   --> src\metadata\api\bulk.rs:719:70
    |
719 |     fn archive_metadata_to_history(&self, transaction: &Transaction, asset_id: i64) -> Result<(), String> {
    |                                                                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_asset_id`

warning: unused variable: `transaction`
   --> src\metadata\api\bulk.rs:727:9
    |
727 |         transaction: &Transaction, 
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transaction`

warning: unused variable: `asset_id`
   --> src\metadata\api\bulk.rs:728:9
    |
728 |         asset_id: i64, 
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_asset_id`

warning: unused variable: `schema`
   --> src\metadata\api\bulk.rs:729:9
    |
729 |         schema: &AssetMetadataSchema, 
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `config`
   --> src\metadata\api\bulk.rs:730:9
    |
730 |         config: &SchemaApplicationConfig
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `config`
   --> src\metadata\api\bulk.rs:736:53
    |
736 |     fn process_import_batch(&self, batch: &[Value], config: &BatchImportConfig, batch_index: u32) -> Result<BatchResult, String> {
    |                                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `batch_index`
   --> src\metadata\api\bulk.rs:736:81
    |
736 |     fn process_import_batch(&self, batch: &[Value], config: &BatchImportConfig, batch_index: u32) -> Result<BatchResult, String> {
    |                                                                                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_index`

warning: unused variable: `csv_data`
   --> src\metadata\api\export.rs:257:17
    |
257 |         let mut csv_data: Vec<Vec<String>> = Vec::new();
    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_csv_data`

warning: variable does not need to be mutable
   --> src\metadata\api\export.rs:257:13
    |
257 |         let mut csv_data: Vec<Vec<String>> = Vec::new();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src\metadata\api\export.rs:441:13
    |
441 |         let mut warnings = Vec::new();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `config`
   --> src\metadata\api\export.rs:540:37
    |
540 |     fn get_filtered_metadata(&self, config: &ExportConfig) -> Result<Vec<AssetMetadata>, String> {
    |                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `config`
   --> src\metadata\api\export.rs:764:47
    |
764 |     fn parse_csv_import(&self, content: &str, config: &ImportConfig) -> Result<Vec<Value>, String> {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `content`
   --> src\metadata\api\export.rs:798:32
    |
798 |     fn parse_xml_import(&self, content: &str) -> Result<Vec<Value>, String> {
    |                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_content`

warning: unused variable: `config`
   --> src\metadata\api\integration.rs:580:49
    |
580 |     pub fn sync_external_metadata_source(&self, config: ExternalSyncConfig) -> Result<SyncResults, String> {
    |                                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `config`
   --> src\metadata\api\integration.rs:640:17
    |
640 |             let config: WebhookConfig = serde_json::from_str(&config_json)
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `e`
   --> src\metadata\api\integration.rs:641:27
    |
641 |                 .map_err(|e| rusqlite::Error::InvalidColumnType(0, "config_json".to_string(), rusqlite::types::Type::Text))?;
    |                           ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `webhook_id`
   --> src\metadata\api\integration.rs:667:13
    |
667 |         let webhook_id = webhook_id as i64;
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_webhook_id`

warning: unused variable: `test_payload`
   --> src\metadata\api\integration.rs:663:58
    |
663 |     pub fn test_metadata_webhook(&self, webhook_id: u32, test_payload: String) -> Result<WebhookDelivery, String> {
    |                                                          ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_payload`

warning: unused variable: `data`
   --> src\metadata\api\integration.rs:788:61
    |
788 |     pub fn validate_metadata_against_external_schema(&self, data: String, external_schema: String) -> Result<ValidationResult, String> {
    |                                                             ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `external_schema`
   --> src\metadata\api\integration.rs:788:75
    |
788 |     pub fn validate_metadata_against_external_schema(&self, data: String, external_schema: String) -> Result<ValidationResult, String> {
    |                                                                           ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_external_schema`

warning: unused variable: `e`
   --> src\metadata\api\integration.rs:827:27
    |
827 |                 .map_err(|e| rusqlite::Error::InvalidColumnType(0, "template_json".to_string(), rusqlite::types::Type::Text))
    |                           ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `sanitized_filename`
   --> src\security\mod.rs:196:13
    |
196 |         let sanitized_filename = self.file_security_validator.sanitize_filename(filename)?;
    |             ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sanitized_filename`

warning: unused variable: `asset_id`
   --> src\associations\mod.rs:549:41
    |
549 |     fn validate_file_association(&self, asset_id: i64, file_id: i64, file_type: &AssociationType) -> Result<Vec<AssociationValidation>> {
    |                                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_asset_id`

warning: unused variable: `file_id`
   --> src\associations\mod.rs:549:56
    |
549 |     fn validate_file_association(&self, asset_id: i64, file_id: i64, file_type: &AssociationType) -> Result<Vec<AssociationValidation>> {
    |                                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_file_id`

warning: unused variable: `file_type`
   --> src\associations\mod.rs:549:70
    |
549 |     fn validate_file_association(&self, asset_id: i64, file_id: i64, file_type: &AssociationType) -> Result<Vec<AssociationValidation>> {
    |                                                                      ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_file_type`

warning: unused variable: `processed`
   --> src\bulk\operations.rs:443:76
    |
443 |     fn update_operation_progress(&self, operation_id: &str, progress: f64, processed: i32, failed: i32) -> Result<()> {
    |                                                                            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_processed`

warning: unused variable: `failed`
   --> src\bulk\operations.rs:443:92
    |
443 |     fn update_operation_progress(&self, operation_id: &str, progress: f64, processed: i32, failed: i32) -> Result<()> {
    |                                                                                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_failed`

warning: unused variable: `sanitized_password`
   --> src\handlers\vault_handler.rs:282:13
    |
282 |         let sanitized_password = Self::validate_and_sanitize_input(&request.new_password, "password")?;
    |             ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sanitized_password`

Some errors have detailed explanations: E0063, E0277, E0308, E0560, E0599, E0616.
For more information about an error, try `rustc --explain E0063`.
warning: `ferrocodex` (lib) generated 214 warnings
error: could not compile `ferrocodex` (lib) due to 177 previous errors; 214 warnings emitted
